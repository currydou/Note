
2.java基础。类，对象，数据类型，标识符规则，直接量，数组，组合。-------------常量池，编译，String，==，equals？
	   java三大基本特征，封装，继承，多态
	   关键字 this，static，final，
	   内存 数组 直接量 变量(局部，成员) 对象  对象和垃圾回收。。。
	   类相关 方法 构造器 单例  抽象类 接口 内部类
	   枚举类
	   基础类库 Scanner System Runntime Object StringBuffer() Math 日期相关类 及格式化日期。。
	   工具类 Arrays  Collections 线程安全集合类
	   集合	概念 继承关系 有哪些具体实现类 区别 Iterator 常用的相似的集合类的优缺点 性能
	   泛型 看java文件夹 泛型擦除
	   异常
	   文件/流
	   多线程
	   网络编程
     	注解
	   类加载机制/反射
	   动态代理
	   其他  lambda 正则
     简单看看  JVM， GC

3.设计模式 团购，remusic等其他app安装。。。。。。。。。。。。。。。。。。。。。。。。。

4.Android
	权限	做过6.0的权限适配，7.0的应用私有目录被限制访问，没做过适配
	基础 四大组件，fragment
	屏幕适配
	3.4.2-View的事件体系(自定义View/事件传递机制/滑动处理)--几个点--简书的文章
	性能方面
	编程思想 设计模式体现的 数据库ORM AOP IOC	...
	框架的原理	Volley，EventBus （）
	-Handler消息机制 HandlerThread的实现
	线程和线程池
	IPC
	


	简历上的技术；项目  准备
	各种开发方式。。。
	
--先再看一下《Android群英传》，《Android开发探索艺术》binder机制
	
看别人的面试经历
今晚 ：简历上的技术，hyblog的自定义view
自我介绍的几个方面！，之后的话题从哪几个方面说。
项目方面：做过的项目，遇到的难点，用到的知识

打印简历
明天再复习一遍


主要说的几个点：

设计模式的例子，优点
单例模式，Build模式，适配器模式，观察者模式(RX，EventBus)

Retrofit 是一个 RESTful 的 HTTP 网络请求框架的封装。注意这里并没有说它是网络请求框架，
主要原因在于网络请求的工作并不是 Retrofit 来完成的。Retrofit 2.0 开始内置 OkHttp，
前者专注于接口的封装，后者专注于网络请求的高效，二者分工协作
编程思想：减少解耦，降低耦合，让我的接口开发灵活，不同api之间互相不干扰，
代码风格：使用注解方式，代码简洁，易懂，易上手
设计思想：采用建造者模式，开发构建简便！

RX ：简洁（只看过写过一些demo，不能灵活应用）
随着程序逻辑变得越来越复杂，它依然能够保持简洁

MVP，MVC，MVVM

GreenDao：
greenDao是一个将对象映射到SQLite数据库中的轻量且快速的ORM解决方案。
ORM(对象关系映射)用面向对象的方式操作数据库 	--拓展->AOP，面向接口编程之类的
1、一个精简的库
2、性能最大化
3、内存开销最小化
4、易于使用的 APIs
5、对 Android 进行高度优化






双锁原理 volatile原理 静态内部类实现单例的原理 hashmap的实现原理(如何解决冲突的)
进程和线程的区别 死锁 Serializable和Parcelable的区别 下拉Listview的实现及优化
LRUCache算法的实现


以后再看的
	java： 《jvm原理》，
	数据结构(二叉树) 算法()
	Android： opengl，surfaceView，长连接
	网络：网络五层结构，TCP和UDP 三次握手和四次挥手
